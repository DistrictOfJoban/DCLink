plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

def default_version = "1.17.1"

/* You can set gradle properties in command line with the -P flag, this can be used in an unattended environment (e.g. Github Action) */
/* e.g. gradlew build -PbuildVersion=1.16.5 */
/* Otherwise we get the default_build_version above */
def minecraft_version = rootProject.properties.containsKey("buildVersion") ? rootProject.getProperties().get("buildVersion") : default_version

boolean is_116 = (minecraft_version as String).startsWith("1.16")
boolean is_117 = (minecraft_version as String).startsWith("1.17")
boolean is_118 = (minecraft_version as String).startsWith("1.18")
boolean is_119 = (minecraft_version as String).startsWith("1.19")
boolean is_120 = (minecraft_version as String).startsWith("1.20")

def yarn_version = is_116 ? project.yarn_mappings_1_16 : is_117 ? project.yarn_mappings_1_17 : is_118 ? project.yarn_mappings_1_18 : is_119 ? project.yarn_mappings_1_19 : project.yarn_mappings_1_20
def fabric_api_version = is_116 ? project.fabric_version_1_16 : is_117 ? project.fabric_version_1_17 : is_118 ? project.fabric_version_1_18 : is_119 ? project.fabric_version_1_19 : project.fabric_version_1_20

repositories {
	mavenCentral()
	maven {
		url "https://m2.dv8tion.net/releases"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.fabricmc:yarn:${yarn_version}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	implementation include("net.dv8tion:JDA:${project.jda_version}") {
		exclude module: 'opus-java'
	}

	/* JDA Dependencies */
	include "com.fasterxml.jackson.core:jackson-databind:2.10.1"
	include "com.fasterxml.jackson.core:jackson-annotations:2.10.1"
	include "com.fasterxml.jackson.core:jackson-core:2.10.1"
	modImplementation "com.fasterxml.jackson.core:jackson-databind:2.10.1"
	modImplementation "com.fasterxml.jackson.core:jackson-annotations:2.10.1"
	modImplementation "com.fasterxml.jackson.core:jackson-core:2.10.1"

	include group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
	include "com.squareup.okio:okio:1.13.0"
	include "com.neovisionaries:nv-websocket-client:2.14"
	include "com.squareup.okhttp3:okhttp:3.13.0"
	include "net.sf.trove4j:trove4j:3.0.3"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
}

compileJava.options.encoding = 'UTF-8'

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

task setupMappings() {
	System.out.println("Copying version mappings for Minecraft ${minecraft_version}")
	copy {
		outputs.upToDateWhen { false }
		from "src/main/mappings/${is_116 ? "1.16" : is_117 ? "1.17" : is_118 ? "1.18" : is_119 ? "1.19" : "1.20"}"
		into "src/main/java/com/lx/dclink"
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = is_116 ? 8 : 16
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

allprojects {
	afterEvaluate {
		for (def task in it.tasks) {
			if (task != rootProject.tasks.setupMappings) {
				task.dependsOn rootProject.tasks.setupMappings
			}
		}
	}
}
